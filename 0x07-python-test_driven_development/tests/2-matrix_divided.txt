====================================
Test Cases for 2-matrix_divided module
==================================== 

This module define 1 function called ``matrix_divided(matrix, div)``

===========
Basic Usage
===========

``matrix_divided`` returns a new list of lists that contains the elements in matrix
divided by 2


    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [2, 3, 1],
    ...     [4, 5, 6]
    ... ]
    >>> matrix_divided(matrix, 2)
    [[1.0, 1.5, 0.5], [2.0, 2.5, 3.0]]

results are rounded to 2 decimal places

    >>> matrix_divided(matrix,3)
    [[0.67, 1.0, 0.33], [1.33, 1.67, 2.0]]

original matrix is not changed
    >>> matrix
    [[2, 3, 1], [4, 5, 6]]

handles floating point matrices

    >>> matrix = [
    ...     [1, -2.2, 3, 4.4, 5],
    ...     [-6.6, 7.00, 8, 9.999, 10]
    ... ]
	  >>> matrix_divided([[1.2, 3.5], [3.3, 4.4]], 2)
	  [[0.6, 1.75], [1.65, 2.2]]

Matrix has to be a list of lists, each list consists of integers or floats

    >>> matrix_divided([4, 3, 5], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

if the matrix is empty it doesn't do any operations

    >>> print(matrix_divided([[]], 2))
    [[]]

if the matrix is only an empty list, the function fails
    >>> matrix_divided([], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

same error occurs if the matrix is None, or if the matrix isn't a list
or its items are not integers/ floats

	>>> matrix_divided(None, 10)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats


	>>> matrix_divided("STRING", 5)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([["STRING"],[5]], 5)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

It also fails if the rows in the matrix are of different lengths

	>>> matrix_divided([[5,4],[5]], 5)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

Also, it fails for division by 0

    >>> matrix_divided([[10, 20], [20, 50]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

if div isn't of valid type (int or float), the function raises an error.

::

	>>> matrix_divided([[10, 20], [-30, 40]], "hello")
	Traceback (most recent call last):
	TypeError: div must be a number

::

	>>> matrix_divided([[10, 20], [-30, 40]], 5+2j)
	Traceback (most recent call last):
	TypeError: div must be a number

::

	>>> matrix_divided([[10, 20], [-30, 40]], None)
	Traceback (most recent call last):
	TypeError: div must be a number



