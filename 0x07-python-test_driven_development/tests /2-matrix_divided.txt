====================================
Test Cases for 0-add_integer Module
==================================== 

This module define 1 function called ``add_integer(a,b=98)``

===========
Basic Usage
===========

``add_integer(...)`` returns the sum of the 2 numbers passed.

Importing function:
    >>> add_integer = __import__('0-add_integer').add_integer

Add 2 numbers (10 , 11)
    >>> add_integer(10,11)
    21

Add 2 numbers, one of them is -ve
    >>> add_integer(10, -10)
    0
    >>> add_integer(1, -3)
    -2

Adding 2 floating point numbers (floats are casted to int)
    >>> add_integer(1.4,10.3)
    11
    >>> add_integer(1.4, -3.6)
    -2

Second Argument is optional
    >>> add_integer(1)
    99

==========
Exceptions
==========
``add_integer(...)`` expects both parameters to be integers or floats.
If either fails to satisfy a TypeError is Raised.

    >>> add_integer('c', 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, 'v')
    Traceback (most recent call last):
    TypeError: b must be an integer


    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If Both parameters fail to satisfy error is thrown for the first parameter

    >>> add_integer('c', 'v')
    Traceback (most recent call last):
    TypeError: a must be an integer

When Given the value Nan it throws a Value Error

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(1,float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

When Passed infinity, it throws OverflowError

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
